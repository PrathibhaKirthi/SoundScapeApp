

import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author P.Kirthi
 */
public class SoundScapeGUI extends javax.swing.JFrame {

    /**
     * Creates new form SoundScapeGUI
     */
    private LikedPlaylistInterface myQueue;
    private GenreLinkedList rockPlaylist;
    private GenreLinkedList popPlaylist;
    private Song lastAddedSong;

    public SoundScapeGUI() {
        myQueue = new LikedPlaylistQueue();
        rockPlaylist = new GenreLinkedList();
        popPlaylist = new GenreLinkedList();
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TitleLBL = new javax.swing.JLabel();
        NameLBL = new javax.swing.JLabel();
        NameTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        GenreTF = new javax.swing.JTextField();
        AddToLikedBTN = new javax.swing.JButton();
        ExitBTN = new javax.swing.JButton();
        SearchBTN = new javax.swing.JButton();
        DeleteBTN = new javax.swing.JButton();
        MoveBTN = new javax.swing.JButton();
        RockBTN = new javax.swing.JButton();
        PopBTN = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        SongTADisplay = new javax.swing.JTextArea();
        SearchTF = new javax.swing.JTextField();
        SearchLBL = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        DisplayTA = new javax.swing.JTextArea();
        DeleteTF = new javax.swing.JTextField();
        DeleteLBL = new javax.swing.JLabel();
        MoveLBL = new javax.swing.JLabel();
        MoveTF = new javax.swing.JTextField();
        SizeBTN = new javax.swing.JButton();
        repeatBTN = new javax.swing.JButton();
        repeatLBL = new javax.swing.JLabel();
        repeatTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TitleLBL.setFont(new java.awt.Font("Arial Nova", 0, 24)); // NOI18N
        TitleLBL.setForeground(new java.awt.Color(153, 153, 255));
        TitleLBL.setText("WELCOME TO SOUND SCAPE !");

        NameLBL.setFont(new java.awt.Font("Arial Nova", 0, 14)); // NOI18N
        NameLBL.setForeground(new java.awt.Color(51, 51, 255));
        NameLBL.setText("Song name:");

        jLabel1.setFont(new java.awt.Font("Arial Nova", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 255));
        jLabel1.setText("Song genre:");

        AddToLikedBTN.setFont(new java.awt.Font("Arial Nova", 0, 14)); // NOI18N
        AddToLikedBTN.setForeground(new java.awt.Color(51, 51, 255));
        AddToLikedBTN.setText("Add to \"Liked Playlist\"");
        AddToLikedBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddToLikedBTNActionPerformed(evt);
            }
        });

        ExitBTN.setFont(new java.awt.Font("Arial Nova", 0, 14)); // NOI18N
        ExitBTN.setForeground(new java.awt.Color(51, 51, 255));
        ExitBTN.setText("Exit");
        ExitBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitBTNActionPerformed(evt);
            }
        });

        SearchBTN.setFont(new java.awt.Font("Arial Nova", 0, 14)); // NOI18N
        SearchBTN.setForeground(new java.awt.Color(51, 51, 255));
        SearchBTN.setText("Search");
        SearchBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBTNActionPerformed(evt);
            }
        });

        DeleteBTN.setFont(new java.awt.Font("Arial Nova", 0, 14)); // NOI18N
        DeleteBTN.setForeground(new java.awt.Color(51, 51, 255));
        DeleteBTN.setText("Delete");
        DeleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBTNActionPerformed(evt);
            }
        });

        MoveBTN.setFont(new java.awt.Font("Arial Nova", 0, 14)); // NOI18N
        MoveBTN.setForeground(new java.awt.Color(51, 51, 255));
        MoveBTN.setText("Move");
        MoveBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveBTNActionPerformed(evt);
            }
        });

        RockBTN.setFont(new java.awt.Font("Arial Nova", 0, 14)); // NOI18N
        RockBTN.setForeground(new java.awt.Color(51, 51, 255));
        RockBTN.setText("Display Rock Playlist ");
        RockBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RockBTNActionPerformed(evt);
            }
        });

        PopBTN.setFont(new java.awt.Font("Arial Nova", 0, 14)); // NOI18N
        PopBTN.setForeground(new java.awt.Color(51, 51, 255));
        PopBTN.setText("Display Pop Playlist");
        PopBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopBTNActionPerformed(evt);
            }
        });

        SongTADisplay.setColumns(20);
        SongTADisplay.setRows(5);
        jScrollPane1.setViewportView(SongTADisplay);

        SearchTF.setFont(new java.awt.Font("Arial Nova", 0, 12)); // NOI18N
        SearchTF.setForeground(new java.awt.Color(51, 51, 255));
        SearchTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchTFActionPerformed(evt);
            }
        });

        SearchLBL.setFont(new java.awt.Font("Arial Nova", 0, 12)); // NOI18N
        SearchLBL.setForeground(new java.awt.Color(51, 51, 255));
        SearchLBL.setText("Enter name of song you want to search for:");

        DisplayTA.setColumns(20);
        DisplayTA.setFont(new java.awt.Font("Arial Nova", 0, 12)); // NOI18N
        DisplayTA.setForeground(new java.awt.Color(51, 51, 255));
        DisplayTA.setRows(5);
        jScrollPane2.setViewportView(DisplayTA);

        DeleteTF.setFont(new java.awt.Font("Arial Nova", 0, 12)); // NOI18N
        DeleteTF.setForeground(new java.awt.Color(51, 51, 255));

        DeleteLBL.setFont(new java.awt.Font("Arial Nova", 0, 12)); // NOI18N
        DeleteLBL.setForeground(new java.awt.Color(51, 51, 255));
        DeleteLBL.setText("Enter name of song you want to delete:");

        MoveLBL.setFont(new java.awt.Font("Arial Nova", 0, 12)); // NOI18N
        MoveLBL.setForeground(new java.awt.Color(51, 51, 255));
        MoveLBL.setText("Enter name of song you want to move:");

        MoveTF.setFont(new java.awt.Font("Arial Nova", 0, 12)); // NOI18N
        MoveTF.setForeground(new java.awt.Color(51, 51, 255));

        SizeBTN.setFont(new java.awt.Font("Arial Nova", 0, 14)); // NOI18N
        SizeBTN.setForeground(new java.awt.Color(51, 51, 255));
        SizeBTN.setText("Display size");
        SizeBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SizeBTNActionPerformed(evt);
            }
        });

        repeatBTN.setFont(new java.awt.Font("Arial Nova", 0, 12)); // NOI18N
        repeatBTN.setForeground(new java.awt.Color(51, 51, 255));
        repeatBTN.setText("Repeat");
        repeatBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repeatBTNActionPerformed(evt);
            }
        });

        repeatLBL.setFont(new java.awt.Font("Arial Nova", 0, 12)); // NOI18N
        repeatLBL.setForeground(new java.awt.Color(51, 51, 255));
        repeatLBL.setText("Enter which playlist you want to repeat, rock/pop:");

        repeatTF.setFont(new java.awt.Font("Arial Nova", 0, 12)); // NOI18N
        repeatTF.setForeground(new java.awt.Color(51, 51, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TitleLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                    .addComponent(NameLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(NameTF)
                    .addComponent(GenreTF, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))
                .addGap(138, 138, 138)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchBTN)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(SearchLBL))
                    .addComponent(AddToLikedBTN)
                    .addComponent(DeleteLBL)
                    .addComponent(DeleteTF, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteBTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(MoveBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ExitBTN))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(MoveLBL)
                        .addGap(18, 18, 18)
                        .addComponent(repeatLBL))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(RockBTN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PopBTN))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(MoveTF, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(repeatBTN)
                                            .addComponent(SizeBTN)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(repeatTF, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(TitleLBL)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NameLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(GenreTF, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddToLikedBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(SearchLBL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchBTN))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RockBTN)
                            .addComponent(PopBTN))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(SizeBTN)))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DeleteLBL)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(MoveLBL)
                        .addComponent(repeatLBL)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(DeleteTF)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(MoveTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(repeatTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DeleteBTN)
                            .addComponent(MoveBTN))
                        .addGap(0, 12, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ExitBTN)
                        .addComponent(repeatBTN)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void SearchBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBTNActionPerformed
        // TODO add your handling code here:
        //this is to search for a song in the playlist.
        String searchName = SearchTF.getText();
        Song foundSong = myQueue.searchByName(searchName);
        if (foundSong != null) {
            // Display the found song in the GUI

            JOptionPane.showMessageDialog(null, "Found Song: " + foundSong.getSong() + " and the genre is " + foundSong.getGenre());
        } else {
            //display an error message
            JOptionPane.showMessageDialog(null, "Song not found.");
        }
        SearchTF.setText("");
    }//GEN-LAST:event_SearchBTNActionPerformed

    //This is a method to check if there is a song in the playlist and move it to either of them
    // Method to move a song between rock and pop playlists
    public void moveSong(String songName) {
        // Check if the song exists in the rock playlist
        Song song = rockPlaylist.findSong(songName);
        if (song != null) {
            // If the song is in the rock playlist, move it to the pop playlist
            rockPlaylist.removeSong(songName);
            popPlaylist.addSong(song);
            JOptionPane.showMessageDialog(null, "Song moved successfully to the pop playlist");
            displayPopPlaylist();
            
        } else {
            // If the song is not in the rock playlist, check if it's in the pop playlist
            song = popPlaylist.findSong(songName);
            if (song != null) {
                // If the song is in the pop playlist, move it to the rock playlist
                popPlaylist.removeSong(songName);
                rockPlaylist.addSong(song);
                JOptionPane.showMessageDialog(null, "Song moved successfully to the rock playlist");
                displayRockPlaylist();
            } else {
                // If the song is not found in either playlist, display an error message
                JOptionPane.showMessageDialog(null, "No song with that name found in both playlists", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        // Update the display after moving the song
        updateDisplay();
    }

    private void MoveBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveBTNActionPerformed
        // TODO add your handling code here:
        String songName = MoveTF.getText();

        moveSong(songName);
        MoveTF.setText( "");


    }//GEN-LAST:event_MoveBTNActionPerformed

    private void AddToLikedBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddToLikedBTNActionPerformed
        // TODO add your handling code here:
        //This is a button that will allow user to enter song name and genre, then add it to the liked playlist.
        //After adding it to liked playlist if genre is either rock or pop , accordingly it will move the song.
        Song newSong = new Song();
        newSong.setSong(NameTF.getText());
        newSong.setGenre(GenreTF.getText());

        myQueue.addSong(newSong);
        
        //update the new song as the last song as we need the last added song to be moved to the playlist
        lastAddedSong = (newSong);

        if (GenreTF.getText().equalsIgnoreCase("rock")) {
            rockPlaylist.addSong(lastAddedSong); // Add to Rock genre playlist
        } else if (GenreTF.getText().equalsIgnoreCase("pop")) {
            popPlaylist.addSong(lastAddedSong); // Add to Pop genre playlist
        } else {
            JOptionPane.showMessageDialog(null, "Sorry this genre is not available in the options.");
        }

        if (!GenreTF.getText().equalsIgnoreCase("rap/ classical/ country/ jazz/blues/electronic")) {
            SongTADisplay.append(NameTF.getText() + " song was successfully added to the liked playlist\n.");
            SongTADisplay.append(GenreTF.getText() + " genre was successfully added to the liked playlist\n.");
        } else {
            JOptionPane.showMessageDialog(null, "Sorry this song is not as per the pre defined genre.");
        }

        NameTF.setText("");
        GenreTF.setText("");
    }//GEN-LAST:event_AddToLikedBTNActionPerformed

    private void ExitBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitBTNActionPerformed
        // TODO add your handling code here:
        //To exit the application
        System.exit(0);
    }//GEN-LAST:event_ExitBTNActionPerformed

    private void SearchTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchTFActionPerformed

    private void DeleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBTNActionPerformed
        // TODO add your handling code here:
        //This is to delete a song from a playlist. There is a boolean which will check if any song is to be deleted.
        //It checks the removeSong method in the respective java classes.
        String songDelete = DeleteTF.getText();

        //check if song exists on liked playlist
        boolean songToDelete = myQueue.removeSong(songDelete);

        boolean songToDeleteRock = rockPlaylist.removeSong(songDelete);
        boolean songToDeletePop = popPlaylist.removeSong(songDelete);

        if (songToDelete || songToDeleteRock || songToDeletePop) {
            JOptionPane.showMessageDialog(null, "Song was successfully deleted");
        } else {
            JOptionPane.showMessageDialog(null, "No song with that name found");
        }

        updateDisplay();
    }//GEN-LAST:event_DeleteBTNActionPerformed

    //updating the display after deletion of a song.
    private void updateDisplay() {
        DeleteTF.setText("");

        displayRockPlaylist();
        displayPopPlaylist();
    }


    private void RockBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RockBTNActionPerformed
        // TODO add your handling code here:
        //TO display the rock playlist on he screen.
        displayRockPlaylist();
    }//GEN-LAST:event_RockBTNActionPerformed

    //this is for printing the pop genre playlist
    //we use the printList method from GenreLinkedList to print the list on the screen
    private void displayRockPlaylist() {
        DisplayTA.setText("Rock playlist:\n");

        rockPlaylist.printList(DisplayTA);
        DisplayTA.setVisible(true);
    }

    //this is to display the pop playlist
    private void displayPopPlaylist() {
        DisplayTA.setText("Pop playlist:\n");

        popPlaylist.printList(DisplayTA);
        DisplayTA.setVisible(true);
    }
    private void PopBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopBTNActionPerformed
        // TODO add your handling code here:
        displayPopPlaylist();
    }//GEN-LAST:event_PopBTNActionPerformed

    private void SizeBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SizeBTNActionPerformed
        // TODO add your handling code here:
        //There is a method called int size, which will give us the size of each playlist.
        JOptionPane.showMessageDialog(null, "There are: " + myQueue.size() + " songs in the liked playlist\n");
        JOptionPane.showMessageDialog(null, "There are: " + rockPlaylist.size() + " songs in the rock playlist\n");
        JOptionPane.showMessageDialog(null, "There are: " + popPlaylist.size() + " songs in the pop playlist\n");
    }//GEN-LAST:event_SizeBTNActionPerformed

    private void repeatBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repeatBTNActionPerformed
        // TODO add your handling code here:
        //If the user would like to repeat a playlist.
        //There is a boolean called repeat in the respective classes, which then displays the playlist.
        String playlistRepeat = repeatTF.getText();
        if(playlistRepeat.equalsIgnoreCase("pop")){
            popPlaylist.setRepeat(true);
            displayRockPlaylist();
        }
        else if(playlistRepeat.equalsIgnoreCase("rock")){
            rockPlaylist.setRepeat(true);
            displayPopPlaylist();
        }
        else{
            JOptionPane.showMessageDialog(null, "Sorry playlist not found with:"+playlistRepeat);
        }
        
    }//GEN-LAST:event_repeatBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SoundScapeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SoundScapeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SoundScapeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SoundScapeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SoundScapeGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddToLikedBTN;
    private javax.swing.JButton DeleteBTN;
    private javax.swing.JLabel DeleteLBL;
    private javax.swing.JTextField DeleteTF;
    private javax.swing.JTextArea DisplayTA;
    private javax.swing.JButton ExitBTN;
    private javax.swing.JTextField GenreTF;
    private javax.swing.JButton MoveBTN;
    private javax.swing.JLabel MoveLBL;
    private javax.swing.JTextField MoveTF;
    private javax.swing.JLabel NameLBL;
    private javax.swing.JTextField NameTF;
    private javax.swing.JButton PopBTN;
    private javax.swing.JButton RockBTN;
    private javax.swing.JButton SearchBTN;
    private javax.swing.JLabel SearchLBL;
    private javax.swing.JTextField SearchTF;
    private javax.swing.JButton SizeBTN;
    private javax.swing.JTextArea SongTADisplay;
    private javax.swing.JLabel TitleLBL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton repeatBTN;
    private javax.swing.JLabel repeatLBL;
    private javax.swing.JTextField repeatTF;
    // End of variables declaration//GEN-END:variables
}
